#include <iostream>
#include <iomanip>
#include <map>
#include <algorithm>
#include <string>

using namespace std;

map<string, double> exercisePerMinute = {
    {"RUNNING", 7.7}, {"WALKING", 4.7}, {"SPRINTING", 15.5},
    {"CYCLING", 8.0}, {"STATIONARY BIKE", 6.0}, {"SPINNING", 10.0},
    {"YOGA", 5.5}, {"PILATES", 3.7}, {"DANCING", 5.5}, {"HIP HOP", 7.0},
    {"BALLET", 5.0}, {"ELLIPTICAL TRAINER", 6.0}, {"ROWING MACHINE", 7.0},
    {"STEP MACHINE", 8.0}, {"WEIGHT TRAINING", 3.5}, {"HIGH KNEES", 10.5},
    {"MOUNTAIN CLIMBING", 14.2}, {"STAIRS", 11.0}, {"ELBOW PLANK", 5.0},
    {"SIDE PLANK", 2.6}, {"FULL PLANK", 3.5}
};

map<string, double> exercisePerRep = {
    {"SWIMMING", 12.1}, {"PUSH-UPS", 0.5}, {"MODIFIED PUSH-UPS", 0.3}, {"DIPS", 1.2},
    {"TRICEPS DIPS", 0.8}, {"PARALLEL BAR DIPS", 1.5}, {"SQUATS", 2.2}, {"JUMP SQUATS", 4.0},
    {"WALL SQUATS", 1.0}, {"LUNGES", 1.3}, {"WALKING LUNGES", 0.9}, {"REVERSE LUNGES", 1.1},
    {"SIT-UPS", 0.2}, {"CRUNCHES", 0.1}, {"LEG RAISES", 0.4}, {"JUMPING JACKS", 10.0},
    {"DOUBLE UNDERS", 15.0}, {"JUMPING ROPE", 12.3}, {"SINGLE LEG JUMPS", 0.8}, {"BOX JUMPS", 2.2},
    {"BURPEES", 1.3}
};

void display_map(const map<string, double>& exercise_map) {
    int count = 0;
    const int columns = 3;

    for (const auto& entry : exercise_map) {
        cout << left << setw(25) << entry.first;

        if (++count % columns == 0) {
            cout << endl;
        }
    }
}

void display_valid_workouts() {
    cout << "Valid Workouts Measured Per Minute:\n\n";
    display_map(exercisePerMinute);
    cout << "\n\nValid Workouts Measured Per Rep:\n\n";
    display_map(exercisePerRep);
    cout << endl << endl;
}

bool isnumeric(const string& number) {
    for (char character : number) {
        if (character == '.') {
            continue;
        }
        if (!isdigit(character)) {
            return false;
        }
    }
    return true;
}

double get_time() {
    string text = "Enter workout duration (in minutes): ";
    string number;

    cout << text;
    cin >> number;

    if (!isnumeric(number) || stod(number) <= 0) {
        cout << "Invalid input, please try again.\n\n";
        return get_time();
    }

    return stod(number);
}

double calculate_time_cal(const string& workout, double time, const map<string, double>& exercisePerMinute) {
    if (exercisePerMinute.find(workout) != exercisePerMinute.end()) {
        double cal_per_min = exercisePerMinute.at(workout) * time;
        return cal_per_min;
    } else {
        cout << "Invalid workout, please try again.\n\n";
        return 0;
    }
}

double get_reps(int order) {
    string text[] = {"Enter number of sets: ", "Enter number of reps: "};
    string number;

    cout << text[order];
    cin >> number;

    if (!isnumeric(number) || stod(number) <= 0) {
        cout << "Invalid input, please try again.\n\n";
        return get_reps(order);
    }

    return stod(number);
}

double calculate_rep_cal(const string& workout, double sets, double reps, const map<string, double>& exercisePerRep) {
    if (exercisePerRep.find(workout) != exercisePerRep.end()) {
        double cal_per_rep = exercisePerRep.at(workout) * sets * reps;
        return cal_per_rep;
    } else {
        cout << "Invalid workout, please try again.\n\n";
        return 0;
    }
}

void calculate_calories_burnt() {
    double total_calories_burnt = 0;
    double calories = 0;

    while (true) {
        string workout;
        cout << "Enter your workout (or type 'none' to quit): ";
        getline(cin, workout);

        transform(workout.begin(), workout.end(), workout.begin(), ::toupper);

        if (workout == "NONE") {
            break;
        }

        if (exercisePerMinute.find(workout) != exercisePerMinute.end()) {
            double time;

            time = get_time();

            calories = calculate_time_cal(workout, get_time(), exercisePerMinute);
            cout << "Calories burnt for " << workout << ": " << calories << " cal.\n";

            total_calories_burnt += calories;
            cout << "Total calories burnt tracker: " << total_calories_burnt << " cal.\n\n";
        } else if (exercisePerRep.find(workout) != exercisePerRep.end()) {
            double sets, reps;

            sets = get_reps(0);
            reps = get_reps(1);

            calories = calculate_rep_cal(workout, sets, reps, exercisePerRep);
            cout << "Calories burnt for " << workout << ": " << calories << " cal.\n";

            total_calories_burnt += calories;
            cout << "Total calories burnt tracker: " << total_calories_burnt << " cal.\n\n";
        } else {
            cout << "Invalid workout, please try again.\n\n";
        }
    }

    cout << "\nThe total number of calories you burnt through workouts: " << total_calories_burnt << " cal.\n";
}


